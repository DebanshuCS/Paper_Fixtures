
Abstract In this paper we deﬁne the notion of a pri-
vacy design strategy. These strategies help IT architects
to support privacy by design early in the software devel-
opment life cycle, during concept development and ana-
lysis. Using current data protection legislation as point of
departure we derive the following eight privacy design
strategies: MINIMISE, HIDE, SEPARATE, AGGREGATE, INFORM,
CONTROL, ENFORCE, and DEMONSTRATE. The strategies also
provide a useful classiﬁcation of privacy design patterns
and the underlying privacy enhancing technologies. We
therefore believe that these privacy design strategies are
not only useful when designing privacy friendly systems,
but also helpful when evaluating the privacy impact of
existing IT systems.
 Introduction
The goal of privacy by design is to take privacy require-
ments into account throughout the system development
process, from the conception of a new IT system up to
its realisation . The underlying motivation for this ap-
proach is that by taking privacy serious from the start
the ﬁnal system will be more privacy friendly. Privacy by
design is becoming more important. For example, the pro-
posal for a new European data protection regulation 

 In this paper we focus on data protection, and treat privacy
and data-protection as synonyms.
explicitly requires data protection by design and by de-
fault. It is therefore crucial to support developers in satis-
fying these requirements with practical tools and guide-
lines.
In the context of developing IT systems, privacy by
design implies that privacy protection is a system require-
ment that must be treated like any other functional re-
quirement. As a result, also privacy protection will have
an impact on the design and implementation of the sys-
tem. To support privacy by design, we therefore need
guiding principles to support the inclusion of privacy re-
quirements throughout the system development life cycle
But there is a considerable gap to be bridged here: so
far there is little experience in applying privacy by design
in engineering .
As explained in Section 2, an important methodology
during the design phase is the application of so called
software design patterns. These design patterns reﬁne
the system architecture to achieve certain functional re-
quirements within a given set of constraints. During soft-
ware development the availability of practical methods to
protect privacy is high during actual implementation, but
low when starting the project. Numerous privacy enhanc-
 technologies (PETs) exists that can be applied more
or less ’of the shelf’. Before that implementation stage,
privacy design patterns can be used during system de-
sign. Signiﬁcantly less design patterns exist compared to
PETs, however. And at the start of the project, during the
concept development and analysis phases, the developer
stands basically empty handed.
This paper aims to contribute to closing this gap. De-
sign patterns do not necessarily play a role in the earlier,
concept development and analysis, phases of the software
development cycle. The main reason is that such design
patterns are already quite detailed in nature, and more
geared towards solving an implementation problem. To
2
guide the development team in the earlier stages, we
deﬁne the notion of a privacy design strategy. Because
these strategies describe fundamental approaches to pro-
tecting privacy, they enable the IT developer to make
well founded choices during the concept development
and analysis phase. These choices have a huge impact
on the overall privacy protection properties of the ﬁnal
system.
The privacy design strategies developed in this paper
are derived from existing privacy principles and data pro-
tection laws. These are described in section . We focus
on the principles and laws, on which the design of an
IT system has a potential impact. By taking an abstract
information storage model of an IT system as a point of
departure, these legal principles are translated to a con-
text more relevant for the IT developer in section 4. This
leads us to deﬁne the following privacy design strategies:
MINIMISE, HIDE, SEPARATE, AGGREGATE, INFORM, CONTROL,
ENFORCE and DEMONSTRATE. They are described in detail
in section 5. We validate our approach in section 6 by
verifying that the strategies we derived indeed cover the
legal principles on which they are based. We also show
that the strategies apply to an information ﬂow type of
system.
We believe these strategies help to support privacy
by design throughout the full software development life
cycle, even before the design phase. It makes explicit
which high level decisions can be made to protect privacy,
when the ﬁrst concepts for a new information system are
drafted. The strategies also provide a useful classiﬁca-
tion of privacy design patterns and the underlying pri-
vacy enhancing technologies. We therefore believe that
these privacy design strategies are not only useful when
designing privacy friendly systems, but that they also pro-
vide a starting point for evaluating the privacy impact of
existing information systems.
Our approach builds on the framework by Spieker-
mann and Cranor  that distinguishes four stages of
privacy-friendliness (ranging from fully identiﬁed to com-
pletely anonymous). In their framework, the two high-
est stages are achieved through a privacy-by-architecture
approach. The two lowest stages require a privacy-by-
policy approach. They see these two approached as es-
sentially mutually exclusive: “In contrast, if companies
do not opt for a privacy-by-architecture approach, then
a privacy-by-policy approach must be taken where no-
tice and choice will be essential mechanisms for ensur-
 adequate privacy protection” . In other words, a
system that is engineered as privacy-by-architecture does
not process privacy sensitive data and therefore does not
need privacy-by-policy.
Our view is less binary: a system architecture will
hardly ever guarantee full privacy, and a privacy pol-
concept
development
analysis
implementation
design
testing
evaluation
privacy 
design 
strategies
privacy 
design 
patterns
privacy 
enhancing 
technologies
Fig.  The software development cycle and the relationship with
strategies, patterns and technologies.
icy alone does not give sufﬁcient privacy guarantees ei-
ther. We aim to provide system designers concrete strate-
gies to actually engineer privacy, from both perspectives.
Some of these strategies cover the privacy-by-architecture
approach. Others cover the privacy-by-policy approach.
These strategies are not mutually exclusive, however. Any
subset of the strategies can be applied in parallel when
designing a system in a privacy friendly manner.
2 Software development
Software architecture encompasses the set of signiﬁcant
decisions about the organisation of a software system2,
including
– the selection of the structural elements and their in-
terfaces by which a system is composed,
– the behaviour as speciﬁed in collaborations among
those elements,
– the composition of these structural and behavioural
elements into larger subsystem, and
– the architectural style that guides this organisation.
Typically, the development of a software systems pro-
ceeds in six phases: concept development, analysis, de-
sign, implementation, testing and evaluation. In fact, these
phases are often considered a cycle, where after evalu-
ation a new iteration starts by updating the concept as
appropriate. In this paper we distinguish design strate-
gies (deﬁned in this paper), design patterns and concrete
(privacy enhancing) technologies as tools to support the
decisions to be made in each of these phases. The design
strategies support the concept development and analysis
phases, the design patterns are applicable during the de-
sign phase, and the privacy enhancing technologies are
2 Based on an original deﬁniton by Mary Shaw, expanded in
995 by Grady Booch, Kurt Bittner, Philippe Kruchten and Rich
Reitman as reported in .

useful during the implementation phase. This is depicted
in ﬁgure .
2. Design patterns
The concept of a design pattern is a useful vehicle for mak-
 design decisions about the organisation of a software
system. A design pattern
“provides a scheme for reﬁning the subsystems
or components of a software system, or the rela-
tionships between them. It describes a commonly
recurring structure of communicating components
that solves a general design problem within a par-
ticular context.” 
Typically, the description  of a design pattern con-
tains at least its name, purpose, context (the situations in
which it applies), implementation (its structure, compo-
nents and their relationships), and the consequences (its
results, side effects and trade offs when applied). Many
design patterns exist, at varying levels of abstraction.
People familiar with classical architecture may ﬁnd it
useful to compare a design pattern with common struc-
tural approaches in the construction of buildings. For ex-
ample, an arch is a typical structure that spans a cer-
tain space and supports the structure and mass above it.
Arches are used for this purpose in many different types
of buildings and constructions, ranging from aqueducts
to cathedrals. This is why an arch can be considered a
design pattern.
A classical software design pattern is the Model-View-
Controller, that separates the representation of the data
(the model) from the way it is represented towards the
user (the view) and how the user can modify that data
(using the controller). A much simpler design pattern is
the Iterator pattern, that “provides a way to access the
elements of an aggregate object sequentially without ex-
posing its underlying representation” . By using this
pattern, the actual implementation of the list to process
has become irrelevant and can be changed without chang-
 higher level code.
Few privacy design patterns have been explicitly de-
scribed as such to date. We are aware of the work of
Haﬁz , Pearson , van Rest et al. , and
a recent initiative of the UC Berkeley School of Informa-
tion4. Many more privacy design patterns exist though,
although they have never been described as such. Swee-
ney’s k-anonymity concept  is a classical example
of an idea that implicitly deﬁnes a privacy design pat-
tern. Also the concept of a zero knowledge proof 
 Originally formulated in the late 90s by Trygve Reenskaug
at Xerox PARC, as part of the Smalltalk system.
can be viewed as a design pattern. The same can be said
of mix networks, based on the concept op onion rout-
 . Moreover, many privacy enhancing technologies
implicitly deﬁne a corresponding privacy design pattern.
Good examples are attribute based credentials based on
‘Idemix’  and ‘u-prove’ , and studied in for example
the IRMA5 and the ABC4TRUST project6.
2.2 Design strategies
Because certain design patterns have a higher level of
abstraction than others, some authors also distinguish
architecture patterns, that
“express a fundamental structural organisation or
schema for software systems. They provide a set
of predeﬁned subsystems, specify their responsibilities, and include rules and guidelines for organising the relationships between them.”
The Model-View-Controller pattern cited above is often
considered such an architecture pattern. The distinction
between an architecture pattern and a design pattern is
not always easily made, however. Moreover, there are
even more general principles that guide the system ar-
chitecture without imposing a speciﬁc structural organi-
sation or schema for the system.
We choose, therefore, to express such higher level
abstractions in terms of design strategies. We deﬁne this
as follows.
A design strategy describes a fundamental approach
to achieve a certain design goal. It has certain
properties that allow it to be distinguished from
other (fundamental) approaches that achieve the
same goal.
Whether something classiﬁes as a strategy very much depends on the universe of discourse, and in particular on
the exact goal the strategy aims to achieve. For example,
if the goal is to cross a river, possible strategies are TO
BUILD A BRIDGE, USE THE FERRY, or LEARN TO FLY. However,
if the goal is to build a bridge, then the discourse changes.
The construction of a bridge may be classiﬁed depend-
 on how the forces of tension, compression, bending,
torsion and shear are distributed through its structure. 
A privacy design strategy is a design strategy that achie-
ves (some level of) privacy protection as its goal.
Design strategies do not necessarily impose a speciﬁc
structure on the system although they certainly limit the
possible structural realisations of it. Therefore, they are
also applicable during the concept development and ana-
lysis phase of the development cycle8.
2. Privacy enhancing technologies
Privacy Enhancing Technologies (PETs) are better known,
and much more studied. Borking and Blarkom et al. [,
5] deﬁne them as follows.
“Privacy-Enhancing Technologies is a system of
ICT measures protecting informational privacy by
eliminating or minimising personal data thereby
preventing unnecessary or unwanted processing
of personal data, without the loss of the function-
ality of the information system.”
This deﬁnition was later adopted almost literally by the
European Commission . It is slightly biased towards
the data-minimisation principle, and it suggests that pri-
vacy enhancing technologies are slightly more high-level
than those that are typically studied.
In principle, PETs are used to implement a certain
privacy design pattern with concrete technology. For ex-
ample, both ‘Idemix’  and ‘u-prove’  are privacy en-
hancing technologies implementing the (implicit) design
pattern anonymous credentials. There are many more ex-
amples of privacy enhancing technologies, like ‘cut-and-
choose’ techniques , ‘onion routing’9  to name but a
few. Other good sources for privacy enhancing technolo-
gies are the survey of Ian Goldberg , the Stanford
PET wiki0, and the proceedings of the annual Privacy
Enhancing Technologies Symposium.
2.4 Discussion
The distinction between a design strategy, a design pat-
tern and a privacy enhancing technology are in some way
similar to the classiﬁcation of strategic, tactical and oper-
ational levels of decision making commonly found in the
 We note that the notion of a privacy design strategy should
not be confused with the foundational principles of Cavoukian 
or the concept of a privacy principle from the ISO 2900 Privacy
framework . 
Decisions at the strategic level
are aimed to fulﬁl the company’s mission (in this case
’achieve privacy’). They are not speciﬁc to particular or-ganisational units, and typically express ’what’ to achieve,
without paying much attention to or giving details on
’how’ to achieve this. This corresponds to our notion of
a privacy design strategy. Decisions at the tactical level
make the strategic decisions more concrete, and translate
them to goals and plans for a particular organisational
unit. This corresponds to our notion of a design pattern
that helps solving a generic problem within a particu-lar context. Operational decisions implement the tactical
plans by assigning resources, scheduling production, etc.
This correspond to our notion of (a combination of) pri-vacy enhancing technologies that implement a privacy
design pattern.
An earlier draft of this paper confused anonymous
credentials for a privacy enhancing technology. This is
wrong. In fact attribute based credentials2 are a perfect
example of a privacy design pattern. This pattern describes a general structure separating users, issuers, and
veriﬁers, where the link between issuing a credential and
proving possession of it is broken to prevent tracking
users. This is a telling testimony to the fact that the distinction between a privacy design pattern and a privacy
enhancing technology is not so easy to make in practice (if only because historically many design patterns
are only implicitly deﬁned by the corresponding privacy
enhancing technology).
Let us try to make the distinction clearer by reconsidering the example of the construction of a bridge introduced above. In terms of this example, a design strategy is
the use of SUPPORT (instead of SUSPENSION). After choosing the SUPPORT strategy, there are several design options
one can apply. One of these options is the use of arches
to create the structural support required. Arches then is a
design pattern, in fact a design pattern that occurs in
many different constructions beyond bridges. A concrete
technology to build (i.e., implement) an arch bridge is
to use bricks for the actual construction of a so-called
‘round arch’.
Design patterns may overlap, and may vary in the
level of detail they provide. Similar to the difference in
 Attribute based credentials is a better term than anonymous
credentials because in many cases the credential may contain non-
anonymous information.
 In this paper we will occasionally refer to a design pattern as
if it is already properly deﬁned as such. This is often not the case
(including the case of the attribute based credential at hand here).
For now we will just appeal to the intuitive understanding of the
main structure of the pattern, and defer a full description of such
a pattern to further research. In a way, the secondary purpose of
this paper is to identity such new privacy design patterns, and to
merely record their existence for now.

abstraction between the Model-View-Controller and the
Iterator pattern, the attribute based credentials pattern is
much more concrete than a more generic use pseudonyms
pattern, and in fact may partially overlap with that more
generic pattern. Finally, we note that a privacy design
pattern may sometimes implement several privacy design
strategies.
 The foundations of data protection
We aim to derive privacy design strategies from existing
data protection laws and privacy frameworks. We there-
fore brieﬂy summarise those here.
In the European Union, the legal right to privacy is
based on Article 8 of the European Convention of Hu-
man Rights of 950. In the context of data protection,
this right has been made explicit in the 995 data pro-
tection directive , which is based on the privacy guide-
lines of the Organisation of Economic Co-Operation and
Development (OECD) from 980 .
 The OECD guidelines
The OECD guidelines, of which the US fair information
practices (FIPs)  — notice, choice, access and security
— are a subset, deﬁne the following principles.
– The collection of personal data is lawful, limited, and
happens with the knowledge or consent of the data
subject (Collection Limitation).
– Personal data should be relevant to the purposes for
which they are to be used, and be accurate, complete
and kept up-to-date (Data Quality).
– The purposes of the collection must be speciﬁed up-
front (Purpose Speciﬁcation), and the use of the data
after collection is limited to that purpose (Use Limi-
tation).
– Personal data must be adequately protected (Security
Safeguards).
– The nature and extent of the data processing and
the controller responsible must be readily available
(Openness).
– Individuals have the right to view, erase, rectify, com-
plete or amend personal data stored that relates to
him (Individual Participation).
– A data controller must be accoun for complying
with these principles (Accountability).
 Data protection in Europe
The OECD principles correspond roughly to the main
provisions in the European data protection Directive of
995 . For example, Article 6 states that personal data
must be processed fairly and lawfully, must be collected
for a speciﬁed purpose, and must not be further processed
in a way incompatible with those purposes. Moreover the
data must be adequate, relevant, and not excessive. It
must be accurate and up to date, and kept no longer
than necessary. These provisions express a need for pur-
pose limitation, data minimisation, and data quality.
Other articles of the Directive deal with transparency
and user choice. For example, article  requires unam-
biguous consent from the data subject, while article 0
and  require data controllers to inform data subjects
about the processing of personal data. Article 2 gives
data subjects the right to review and correct the personal
data that is being processed about them. Finally, security
as a means to protect privacy is addressed by article ,
that mandates adequate security of processing.
We note that the European data protection directive
covers many more aspects, that are however less rele-
vant for the discussion in this paper. These aspects are
not concerned with how a system is designed or how it
operates, but are more concerned with the organisational
embedding of the system for example.
The directive is currently under review and a pro-
posal for a regulation to replace it has recently been
published . This regulation is still in ﬂux and un-
der heavy debate, but it contains the following rights
and obligations that are relevant for our discussion in
this paper.
– A controller must implement data protection by de-
sign and by default 
– A controller must be able to demonstrate compliance
with the regulation 
– Data subjects have the right to be forgotten and to
erasure 
– Data subjects have the right to data portability, allow-
 them ‘to obtain from the controller a copy of data
undergoing processing in an electronic and structured
format which is commonly used and allows for further
use by the data subject’ 
– A data controller has the duty to issue a notiﬁcation
whenever a personal data breach occurs 
. The ISO 2900 Privacy Framework perspective
In response to the growing importance of privacy by de-
sign, the International Organisation for Standardisation
(ISO) issued the ISO 2900 Privacy framework . This
framework collects organisational, technical and proce-
dural aspects of privacy protection, with the intention to
enhance existing security standards. The ISO 2900 prin-
6
ciples lie somewhere between purely legal requirements,
and the more technically oriented design strategies that
we aim to develop here. The standard suggests the fol-
lowing eleven privacy principles.
– Consent and choice: inform data subjects, present the
available choices and obtain consent.
– Purpose legitimacy and speciﬁcation: ensure compli-
ance with data protection legislation and inform data
subjects.
– Collection limitation: limit data collection to what is
needed for the purpose.
– Data minimisation: minimise the amount of personal
data collected, minimise the number of actors that
have access, offer as default non-privacy invasive op-
tions, and delete data once it has become no longer
necessary.
– Use, retention and disclosure limitation: limit the use,
retention and disclosure of personal data to what is
needed for the purpose.
– Accuracy and quality: ensure the data is accurate, up-
to-date, adequate and relevant, verify this, and peri-
odically check this.
– Openness, transparency and notice: inform data sub-
jects about the data controller policies, give proper
notices that personal data is being processed, and
provide information on how to access and review per-
sonal data.
– Individual participation and access: give data subjects
a real possibility to access and review their personal
data.
– Accountability: document policies, procedures and practices, assign the duty to implement privacy policies
to speciﬁed individuals in the organisation, provide
sui training, inform about privacy breaches, give
access to effective sanctions and procedures for com-
pensations in case of privacy breaches.
– Information security: provide a proper level of secu-
rity, and implement the right controls, based on an
appropriate risk assessment.
– Privacy compliance verify and demonstrate that the IT
systems meets legal requirements, and have appropriate internal controls and supervision mechanisms.
We will not discuss the merits of this subdivision in any
depth, although we do note that there is quite a bit of
overlap between Consent and choice, Purpose speciﬁcation
and Openness, transparency and notice. Similarly, Collec-
tion limitation, Data minimisation and Use, retention and
disclosure limitation all more or less describe the same
need for data minimisation. As a result, the principles
are only partially useful from the perspective of analysis
and design.
.4 Summary of requirements
Not every legal requirement can be met by designing an
IT system in a speciﬁc way. Legitimacy of processing is
a good example. If the processing is illegitimate, then it
will be illegitimate irrespective of the design of the system. We therefore focus our effort on studying aspects on
which the design of an IT system has a potential impact,
summarised in the list below.
– Purpose limitation (comprising both speciﬁcation of
the purpose and limiting the use to that stated pur-
pose).
– Data minimisation.
– Data quality.
– Transparency (Openness in OECD terms).
– Data subject rights (in terms of consent, and the right
to view, erase, and rectify personal data).
– The right to be forgotten.
– Adequate protection (Security Safeguards in OECD
terms).
– Data portability
– Data breach notiﬁcations.
– Accountability and (provable) compliance.
These principles must be covered by the privacy design
strategies that we will derive next. Whether this is indeed
the case is analysed in section 6.
4 Deriving privacy design strategies
A natural starting point to derive privacy preserving strategies is to look at when and how privacy is violated,
and then consider how these violations can be prevented.
Solove’s taxonomy , for example, identiﬁes four basic
groups of activities that affect privacy: information collection, information processing, information dissemination
and invasions. This is in fact similar to the distinction
made between data transfer, storage and processing by
Spiekermann and Cranor . He then discusses in detail the different ways in which certain speciﬁc activities
(like surveillance, aggregation, disclosure, and intrusion)
affect privacy. The speciﬁc activities identiﬁed by Solove
are too ﬁne grained. Although they may in fact be interesting to distinguish from a legal perspective, many of
them involve basically the same methods at a technical
level. His general subdivision however inspired us to look
at IT systems at a higher level of abstraction to determine
where and how privacy violations can be prevented.
In doing so, we can view an IT system either as an
information storage system (i.e., database system) or an
information ﬂow system. Many of today’s systems, like
classical business or government administration systems,
are database systems. The same holds for social networks.

An alternative view of an IT system is that of an infor-
mation ﬂow system. This view makes sense if the sheer
volume of data (for example those created by sensor net-
works or the Internet of Things) becomes too large to
store. Interestingly, as we shall see later, both views on
IT systems are subject to the same eight privacy design
strategies. We note that in practice a system is often a hy-
brid, with some information ﬂow components and some
information storage components.
Let us ﬁrst consider the information storage system
view. Current data protection legislation  is pretty
much written with such a database model in mind. In a
database, information about individuals is stored in one
or more s. Each  stores a ﬁxed set of attributes
for an individual. The columns in the  represent this
ﬁxed set of attributes. A row is added for each new indi-
vidual about whom a record needs to be stored. Some-
times, data is not stored at the level of individual persons,
but is instead aggregated based on certain relevant group
properties.
Within the legal framework described in section , the
collection of personal data should be proportional to the
purpose for which it is collected, and this purpose should
not be achievable through other, less invasive means. In
practice, this means that data collection should be min-
imised. This can be achieved by not storing individual
rows in a database  for each and every individual.
Also the collection of attributes stored should correspond
to the purpose. Data collected for one purpose should be
stored separately from data stored for another purpose.
Linking of these database s should not be easy. When
data about speciﬁc individuals is not necessary for the
purpose, only aggregate data should be stored. Personal
data should be properly protected, and hidden from other
parties. A data subject should be informed about the fact
that data about her is being processed, and she should be
able to request modiﬁcations and corrections where ap-
propriate. In fact the underlying principle of information
self-determination dictates the she should be in control.
Finally, the collection and processing of personal data
should be done in accordance to a privacy policy, that
should be actively enforced. The current proposal for the
revision of the European privacy directive (into a regu-
lation) also stresses the fact that data controllers should
be able to demonstrate compliance with data protection
legislation. The data controller has the burden of proof
with respect to compliance, and must, for example run
and document a privacy impact assessment (PIA).
Given this analysis form the legal point of view, we
distinguish the following eight privacy design strategies:
MINIMISE, SEPARATE, AGGREGATE, HIDE, INFORM, CONTROL,
ENFORCE and DEMONSTRATE. A graphical representation of
aggregate
minimise
separate
hide
inform
control
enforce
demonstrate
Data subject
Controller

5 The eight privacy design strategies
We will now proceed to describe these eight strategies in
detail. We have grouped the strategies into two classes:
data-oriented strategies and process-oriented strategies.
The ﬁrst class roughly corresponds to the privacy-by-
architecture approach identiﬁed by Spiekermann and Cra-
nor , whereas the process-oriented strategies more-
or-less cover their privacy-by-policy approach. For each
strategy we deﬁne it, explain the deﬁnition and outline its
scope by giving examples. We also present some design
patterns that ﬁt the particular strategy. We would like to
stress that the strategies are not mutually exclusive. Any
subset of the strategies can be applied in parallel when
designing a system in a privacy friendly manner.
 Data oriented strategies
 Strategy #: MINIMISE
The most basic privacy design strategy is MINIMISE, which
states that
The amount of personal data that is processed4
should be restricted to the minimal amount pos-
sible.
 , we use data processing to include the collection, storage
and dissemination of that data as well.
8
This strategy is extensively discussed by Gürses et al. .
By ensuring that no, or no unnecessary, data is collected,
the possible privacy impact of a system is limited. Ap-
plying the MINIMISE strategy means one has to answer
whether the processing of personal data is proportional
(with respect to the purpose) and whether no other, less
invasive, means exist to achieve the same purpose. The
decision to collect personal data can be made at design
time and at run time, and can take various forms. For
example, one can decide not to collect any information
about a particular data subject at all. Alternatively, one
can decide to collect only a limited set of attributes.
Design patterns Common design patterns that implements
this strategy are select before you collect  , anonymi-
sation and use pseudonyms .
5..2 Strategy #2: HIDE
The second design strategy, HIDE, states that
Any personal data, and their interrelationships,
should be hidden from plain view.
The rationale behind this strategy is that by hiding per-
sonal data from plain view, it cannot easily be abused.
The strategy does not directly say from whom the data
should be hidden. And this depends on the speciﬁc con-
text in which this strategy is applied. In certain cases,
where the strategy is used to hide information that spon-
taneously emerges from the use of a system (for example
communication patterns), the intent is to hide the infor-
mation from anybody. In other cases, where information
is collected, stored or processed legitimately by one party,
the intent is to hide the information from any other party.
In this case, the strategy corresponds to ensuring conﬁ-
dentiality.
The HIDE strategy is important, and often overlooked.
In the past, many systems have been designed using in-
nocuous identiﬁers that later turned out to be privacy
nightmares. Examples are identiﬁers on RFID tags, wire-
less network identiﬁers, and even IP addresses. The HIDE
strategy forces one to rethink the use of such identiﬁers.
In essence, the HIDE strategy aims to achieve unlinkabil-
ity and unobservability . Unlinkability in this context
ensures that two events cannot be related to one another
(where events can be understood to include data subjects
doing something, as well as data items that occur as the
result of an event).
Design patterns The design patterns that belong to the
HIDE strategy are a mixed bag. One of them is the use
of encryption of data (when stored, or when in transit).
Other examples are mix networks  to hide trafﬁc pat-
terns , or techniques to unlink certain related events
like attribute based credentials , anonymisation and the
use of pseudonyms. Note that the latter two patterns also
belong to the MINIMISE strategy. In the context of data-
bases, adding noise, perturbing data, and hiding patterns
in databases  based on Differential privacy  are
some other examples. Also the TrackMeNot browser plu-
gin5, described in , belongs to this class. Moreover,
anonymisation and use pseudonyms (that also belong to
the MINIMISE startegy belong to this strategy as well, as
they contribute to achieve unlinkability.
For RFID tags, protocols exist that only reveal the
identity of the tag to a small set of trusted readers .
More generally it would be good practice in wireless net-
work design to verify the authenticity of the access point
before trying to connect to it (and thus making yourself
known). This is similar to the common pattern found in
nature where cubs hide and only reveal themselves after
they recognise their mother (by sound, or scent).
5.. Strategy #: SEPARATE
The third design strategy, SEPARATE, states that
Personal data should be processed in a distributed
fashion, in separate compartments whenever pos-
sible.
By separating the processing or storage of several sources
of personal data that belong to the same person, complete
proﬁles of one person cannot be made. Moreover, sepa-
ration is a good method to achieve purpose limitation.
The strategy of separation calls for distributed processing
instead of centralised solutions. In particular, data from
separate sources should be stored in separate databases,
and these databases should not be linked. Data should be
processed locally whenever possible, and stored locally if
feasible as well. Database s should be split when
possible. Rows in these s should be hard to link to
each other, for example by removing any identiﬁers, or
using  speciﬁc pseudonyms.
These days, with an emphasis on centralised web
based services this strategy is often disregarded. However,
the privacy guarantees offered by peer-to-peer networks
are considerable. Decentralised social networks like Di-
aspora6 are inherently more privacy friendly than cen-
tralised approaches like Facebook and Google.
Design patterns No speciﬁc design patterns for this strat-
egy are known. Therefore, further investigations into de-
sign pattern that implement the SEPARATE strategy are re-
quired. Especially those that also satisfy business needs,
as those typically lead to a centralised solution.

Note that we do not consider Access control to imple-
ment the SEPARATE strategy. SEPARATE is a data-oriented
strategy. It is only concerned with separating data itself,
and not concerned with separating people with access to
the data.
5..4 Strategy #4: AGGREGATE
The fourth design pattern, AGGREGATE, states that
Personal data should be processed at the highest
level of aggregation and with the least possible
detail in which it is (still) useful.
Aggregation of information over groups of attributes or
groups of individuals, restricts the amount of detail in
the personal data that remains. This data therefore be-
comes less sensitive. When the information is sufﬁciently
coarse grained, and the size of the group over which it is
aggregated is sufﬁciently large, little information can be
attributed to a single person, thus protecting its privacy.
Design patterns Examples of design patterns that belong
to this strategy are the following.
Aggregation over time is used to provide some level
of privacy protection in smart metering and smart grid
systems. Instead of recording energy use in real time, only
cumulative values over 5 minute intervals are reported.
Dynamic location granularity is another approach, used
in location based services. It adapts the accuracy of the
reported location of a user to ensure that a reasonable
number of other users are at the same reported location.
k-anonymity  and l-diversity ) are also design
patterns in this class (although one could argue that these
are more a concept that a concrete method to achieve the
speciﬁed property of being indistinguishable among a set
of at least k entities).
5.2 Process oriented strategies
5.2. Strategy #5: INFORM
The INFORM strategy corresponds to the important notion
of transparency:
Data subjects should be adequately informed when-
ever personal data is processed.
Whenever data subjects use a system, they should be
informed about which information is processed, for what
purpose, and by which means. This includes information
 Use can be explicit, like in signing up to a certain service,
or implicit, like entering an area with camera surveillance. This
broader understanding of ’engaging with’ a system is also impor-
tant in ambient intelligent systems and the Internet of Things .
about the ways the information is protected, and being
transparent about the security of the system. Providing
access to clear design documentation is also a good prac-
tice. Data subjects should also be informed about third
parties with which information is shared. And data sub-
jects should be informed about their data access rights
and how to exercise them.
Design patterns A possible design patterns in this category
is the Platform for Privacy P (PP)8. Data breach
notiﬁcations are also a design pattern in this category.
Finally, Graf et al.  provide an interesting collection
of privacy design patterns for informing the user from
the Human Computer Interfacing perspective.
5.2.2 Strategy #6: CONTROL
The control strategy states that
Data subjects should be provided agency over the
processing of their personal data.
The CONTROL strategy is in fact an important counterpart
to the INFORM strategy. Without reasonable means of con-
trolling the use of one’s personal data, there is little use in
informing a data subject about the fact that personal data
is collected. Of course, the converse also holds: without
proper information, there is little use in asking consent.
Data protection legislation often gives the data subject
the right to view, update and even ask the deletion of
personal data collected about her. This strategy under-
lines this fact, and design patterns in this class give users
the tools to exert their data protection rights.
CONTROL goes beyond the strict implementation of
data protection rights, however. It also governs the means
by which users can decide whether to use a certain sys-
tem, and the way they control what kind of information is
processed about them. In the context of social networks,
for example, the ease with which the user can update his
privacy settings through the user interface determines
the level of control to a large extent. So user interaction
design is an important factor as well. Moreover, by pro-
viding users direct control over their own personal data,
they are more likely to correct errors. As a result the
quality of personal data that is processed may increase.
Design patterns We are not aware of speciﬁc design pat-
terns that ﬁt this strategy. Perhaps experience from user
interaction design may be applied to create design pat-
terns for obtaining consent.
8 http://www.w.org/PP/
0
5.2. Strategy #: ENFORCE
The seventh strategy, ENFORCE, states:
A privacy policy compatible with legal require-
ments should be in place and should be enforced.
The ENFORCE strategy ensures that a privacy policy is in
place. This is an important step in ensuring that a sys-
tem respects privacy during its operation. Of course, the
actual level of privacy protection depends on the actual
policy. At the very least it should be compatible with legal
requirements. As a result, purpose limitation is covered
by this strategy as well. More importantly thought, the
policy should be enforced. This implies, at the very least,
that proper technical protection mechanisms are in place
that prevent violations of the privacy policy. Moreover,
appropriate governance structures to enforce that policy
must also be established.
Design patterns Access control is an example of a design
patterns that implement this strategy. Another example
is privacy rights management: a form of digital rights
management involving licenses to personal data, but then
applied to enforce privacy. A similar approach is the use
of sticky policies. Those could also be used to implement
a right-to-be-forgotten (or at least a right-to-erasure).
5.2.4 Strategy #8: DEMONSTRATE
The ﬁnal strategy, DEMONSTRATE, requires a data control-
ler to
Be able to demonstrate compliance with the pri-
vacy policy and any applicable legal requirements.
This strategy goes one step further than the ENFORCE strat-
egy in that it requires the data controller to prove that it
is in control. This is explicitly required in the new draft
EU privacy regulation . In particular this requires the
data controller to be able to show how the privacy pol-
icy is effectively implemented within the IT system. In
case of complaints or problems, she should immediately
be able to determine the extent of any possible privacy
breaches, for example.
Design patterns Design patterns that implement this strat-
egy are, for example, privacy management systems ,
and the use of logging and auditing.
6 Analysis
6. Validation of our approach
The eight privacy design strategies also naturally apply
to an information ﬂow system, as illustrated in Figure .
aggregate
minimise
separate
hide
inform
control
enforce
demonstrate
Data subject
Controller
Fig.  The process ﬂow metaphor of the eight privacy design
strategies.
In this view, MINIMISE corresponds to processing only a
selected subset of the incoming data (and throwing the
rest away), while SEPARATE corresponds to splitting the
data stream in several parts that are each further pro-
cessed at separate locations. AGGREGATE corresponds to
combining (and compressing) data streams, while HIDE
(for example) encrypts the data while in transit. INFORM,
CONTROL, ENFORCE and DEMONSTRATE are essentially the
same as in the information storage model.
As a further validation of our approach, we verify
that the eight privacy design strategies we derived cover
the legal principles outlined in section .   shows
this mapping. It was constructed by mapping the detailed
description of each strategy in section 5 on each of the
legal principles.
As discussed before, not every legal data protection
principle can be covered by a privacy design strategy,
simply because the design of the system has no impact
on that principle. Some data protection principles, like
purpose limitation, are only partially covered by some
of the strategies. Realising purpose limitation in full also
requires procedural and organisational means.
6.2 Design pattern coverage
With respect to design pattern coverage, we ﬁrst observe
that design patterns may belong to several design strate-
gies. For example the use pseudonyms design pattern both
implements the MINIMISE strategy and the HIDE strategy.
Similarly, a privacy enhancing technology may be appli-
cable within several different privacy design patterns.

Purpose limitation
Data minimisation
Data quality
Transparency
Data subject rights
The right to be forgotten
Adequate protection
Data portability
Data breach notiﬁcation
(Provable) Compliance
MINIMISE

HIDE

SEPARATE

AGGREGATE

INFORM

CONTROL

ENFORCE




DEMONSTRATE

Legend:
: covers principle to a large extent.
o: covers principle to some extent.
  Mapping of strategies onto legal principles.
In the course of our investigations we also observed
huge differences between design strategies in terms of the
number of design patterns (and corresponding privacy
enhancing technologies) known to implement them. For
the strategies MINIMISE and HIDE, a large number of de-
sign patterns exist. This is not surprising, given the focus
of most research in privacy enhancing technologies on
these aspects of privacy protection. For the SEPARATE and
CONTROL strategies on the other hand, no corresponding
design patterns are known. This suggests further research
on privacy design patterns should focus on these strate-
gies.
 Conclusions
We have deﬁned the concept of a design strategy, and de-
rived eight privacy design strategies based on data protec-
tion legislation, the OECD guidelines and the ISO 2900
privacy principles. We have described these strategies in
some detail, and have provided a ﬁrst insight into the
possible privacy design patterns that contribute to these
privacy design strategies. Finally, we have validated our
approach by verifying that the strategies cover the essen-
tial data protection principles.
We have taken the legal perspective as point of departure in our approach, and have validated our results
against both the technological and the privacy policy perspective. We have not taken into account any philosophical, sociological or values-based perspectives. It would
be interesting to investigate whether these perspectives
have any impact on the list of privacy design strategies
reported here.
This paper discusses work in progress. In particular,
further research will be performed to classify existing privacy design patterns into privacy design strategies, and
to describe these design patterns in more detail. More-
over, we have identiﬁed several implicitly deﬁned design
patterns (like attribute based credentials) that arise from
our study of existing privacy enhancing technologies.

